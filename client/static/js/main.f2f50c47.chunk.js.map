{"version":3,"sources":["components/TabBar.js","components/SensorTable.js","components/GeneralTable.js","components/SensorSubmitForm.js","components/MarcaSubmitForm.js","components/TipoSubmitForm.js","components/TensaoSubmitForm.js","actions/sensor.js","actions/marca.js","actions/tensao.js","actions/tipo.js","views/Administracao.js","components/Chart.js","components/Map.js","actions/medida.js","views/Sensores.js","App.js","index.js"],"names":["TabBar","state","lastEvent","activeTab","changeUrl","e","preventDefault","setState","target","name","props","history","push","Nav","tabs","NavItem","NavLink","href","onClick","this","active","Component","SensorTable","sensores","length","Table","responsive","striped","map","sensor","i","key","Button","id","color","onDeleteSensor","onEditSensor","codename","tensoes","find","tensao","tensao_id","valor","marcas","marca","marca_id","nome","tipos","tipo","tipo_id","Tamanho","altura","largura","comprimento","Localizacao","latitude","longitude","GeneralTable","tableType","Spinner","keys","Object","tableKey","attribute","j","SensorSubmitForm","submitForm","action","then","data","window","location","reload","onChangeInput","value","ModalHeader","toggle","toggleModal","ModalBody","Form","Row","form","Col","FormGroup","Label","for","Input","type","placeholder","onChange","ModalFooter","MarcaSubmitForm","onInputChange","res","TipoSubmitForm","sulfixo","TensaoSubmitForm","addSensor","a","async","axios","post","deleteSensor","delete","editSensor","put","addMarca","addTensao","addTipo","Administracao","open","modalOpen","sensorModalMode","toBeEdited","toggleCollapse","modalContent","response","Modal","isOpen","ListGroup","ListGroupItem","tag","Collapse","Chart","labels","Medidas","medida","datasets","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","mapCenter","lat","lng","x","Map","latList","lngList","center","zoom","Badge","pill","onSensorClick","addMedida","newMedida","Sensores","selectedSensor","parseInt","submitNewMedida","sensor_id","style","paddingBottom","xs","sm","height","width","InputGroup","newMedidaField","InputGroupAddon","addonType","hist","createBrowserHistory","App","get","marcaRequest","tipoRequest","tensaoRequest","catch","err","alert","Container","fluid","path","render","from","to","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.f2f50c47.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Nav, NavItem, NavLink } from \"reactstrap\";\n\nclass TabBar extends Component {\n  state = {\n    lastEvent: null,\n    activeTab: \"admin\"\n  };\n\n  changeUrl = e => {\n    e.preventDefault();\n\n    this.setState({ activeTab: e.target.name });\n    this.props.history.push(\"/\" + e.target.name);\n  };\n\n  render() {\n    return (\n      <div>\n        <Nav tabs>\n          <NavItem>\n            <NavLink\n              href=\"/admin\"\n              name=\"admin\"\n              onClick={this.changeUrl}\n              active={this.state.activeTab === \"admin\" ? true : false}\n            >\n              Administração\n            </NavLink>\n          </NavItem>\n          <NavItem>\n            <NavLink\n              href=\"/sensores\"\n              name=\"sensores\"\n              onClick={this.changeUrl}\n              active={this.state.activeTab === \"sensores\" ? true : false}\n            >\n              Relatórios\n            </NavLink>\n          </NavItem>\n        </Nav>\n      </div>\n    );\n  }\n}\n\nexport default TabBar;\n","import React from \"react\";\nimport { Spinner, Table, Button } from \"reactstrap\";\n\nfunction SensorTable(props) {\n  if (props.sensores.length === 0) {\n    return <div></div>;\n  }\n\n  return (\n    <Table responsive striped>\n      <thead>\n        <tr>\n          <th></th>\n          <th></th>\n          <th>id</th>\n          <th>Codenome</th>\n          <th>Tensão da Bateria</th>\n          <th>Marca</th>\n          <th>Tipo de sensore</th>\n          <th>Altura</th>\n          <th>Largura</th>\n          <th>Comprimento</th>\n          <th>Latitude</th>\n          <th>Longitude</th>\n        </tr>\n      </thead>\n      <tbody>\n        {props.sensores.map((sensor, i) => {\n          return (\n            <tr key={i}>\n              <td>\n                <Button\n                  name={sensor.id}\n                  color=\"danger\"\n                  onClick={props.onDeleteSensor}\n                >\n                  Excluir\n                </Button>\n              </td>\n              <td>\n                <Button\n                  name=\"edit\"\n                  color=\"primary\"\n                  onClick={props.onEditSensor(sensor)}\n                >\n                  Editar\n                </Button>\n              </td>\n              <td>{sensor.id}</td>\n              <td>{sensor.codename}</td>\n              <td>\n                {\n                  props.tensoes.find(tensao => tensao.id === sensor.tensao_id)\n                    .valor\n                }\n                v\n              </td>\n              <td>\n                {props.marcas.find(marca => marca.id === sensor.marca_id).nome}\n              </td>\n              <td>\n                {props.tipos.find(tipo => tipo.id === sensor.tipo_id).nome}\n              </td>\n              <td>{sensor.Tamanho.altura}</td>\n              <td>{sensor.Tamanho.largura}</td>\n              <td>{sensor.Tamanho.comprimento}</td>\n              <td>{sensor.Localizacao.latitude}</td>\n              <td>{sensor.Localizacao.longitude}</td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </Table>\n  );\n}\n\nexport default SensorTable;\n","import React from \"react\";\nimport { Table, Spinner } from \"reactstrap\";\n\nfunction GeneralTable(props) {\n  if (props.tableType.length === 0) {\n    return <Spinner></Spinner>;\n  }\n  let keys = Object.keys(props.tableType[0]);\n\n  return (\n    <Table responsive striped>\n      <thead>\n        <tr>\n          {keys.map((tableKey, i) => {\n            return <th key={i}>{tableKey}</th>;\n          })}\n        </tr>\n      </thead>\n      <tbody>\n        {props.tableType.map((attribute, i) => {\n          return (\n            <tr key={i}>\n              {keys.map((tableKey, j) => {\n                return <td key={j}>{attribute[tableKey]}</td>;\n              })}\n            </tr>\n          );\n        })}\n      </tbody>\n    </Table>\n  );\n}\n\nexport default GeneralTable;\n","import React, { Component } from \"react\";\nimport {\n  Button,\n  ModalBody,\n  ModalHeader,\n  ModalFooter,\n  Form,\n  FormGroup,\n  Label,\n  Input,\n  Row,\n  Col\n} from \"reactstrap\";\n\nclass SensorSubmitForm extends Component {\n  state = {\n    codename: \"\",\n    altura: 0,\n    largura: 0,\n    comprimento: 0,\n    latitude: 0,\n    longitude: 0,\n    tipo_id: 1,\n    marca_id: 1,\n    tensao_id: 1\n  };\n\n  submitForm = e => {\n    if (this.props.sensor) {\n      this.props.action(this.state, this.props.sensor.id).then(data => {\n        window.location.reload();\n      });\n    } else {\n      this.props.action(this.state).then(data => {\n        window.location.reload();\n      });\n    }\n  };\n\n  onChangeInput = e => {\n    this.setState({ [e.target.name]: e.target.value });\n  };\n\n  componentDidMount() {\n    if (this.props.sensor) {\n      this.setState({\n        codename: this.props.sensor.codename,\n        altura: this.props.sensor.Tamanho.altura,\n        largura: this.props.sensor.Tamanho.largura,\n        comprimento: this.props.sensor.Tamanho.comprimento,\n        latitude: this.props.sensor.Localizacao.latitude,\n        longitude: this.props.sensor.Localizacao.longitude,\n        tipo_id: this.props.sensor.tipo_id,\n        marca_id: this.props.sensor.marca_id,\n        tensao_id: this.props.sensor.tensao_id\n      });\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <ModalHeader toggle={this.props.toggleModal}>\n          Cadastro de sensor\n        </ModalHeader>\n        <ModalBody>\n          <Form>\n            <Row form>\n              <Col>\n                <FormGroup>\n                  <Label for=\"codename\">Codenome</Label>\n                  <Input\n                    type=\"text\"\n                    name=\"codename\"\n                    id=\"codename\"\n                    placeholder=\"Insira um apelido\"\n                    value={this.state.codename}\n                    onChange={this.onChangeInput}\n                  />\n                </FormGroup>\n              </Col>\n            </Row>\n            <Row>\n              <Col>\n                <FormGroup>\n                  <Label for=\"altura\">Dimensões</Label>\n                  <Input\n                    id=\"altura\"\n                    name=\"altura\"\n                    type=\"number\"\n                    placeholder=\"Altura\"\n                    value={this.state.altura}\n                    onChange={this.onChangeInput}\n                  />\n                </FormGroup>\n              </Col>\n              <Col>\n                <FormGroup>\n                  <Label for=\"largura\">‎‎‎‎‎</Label>\n                  <Input\n                    id=\"largura\"\n                    name=\"largura\"\n                    type=\"number\"\n                    placeholder=\"Largura\"\n                    value={this.state.largura}\n                    onChange={this.onChangeInput}\n                  />\n                </FormGroup>\n              </Col>\n              <Col>\n                <FormGroup>\n                  <Label for=\"comprimento\">‎‎‎‎‎‎</Label>\n                  <Input\n                    id=\"comprimento\"\n                    name=\"comprimento\"\n                    type=\"number\"\n                    placeholder=\"Comprimento\"\n                    value={this.state.comprimento}\n                    onChange={this.onChangeInput}\n                  />\n                </FormGroup>\n              </Col>\n            </Row>\n            <Row>\n              <Col>\n                <FormGroup>\n                  <Label for=\"latitude\">Localização</Label>\n                  <Input\n                    id=\"latitude\"\n                    name=\"latitude\"\n                    type=\"number\"\n                    placeholder=\"Latitude\"\n                    value={this.state.latitude}\n                    onChange={this.onChangeInput}\n                  />\n                </FormGroup>\n              </Col>\n              <Col>\n                <FormGroup>\n                  <Label for=\"latitude\">‎</Label>\n                  <Input\n                    id=\"longitude\"\n                    name=\"longitude\"\n                    type=\"number\"\n                    placeholder=\"Longitude\"\n                    value={this.state.longitude}\n                    onChange={this.onChangeInput}\n                  />\n                </FormGroup>\n              </Col>\n            </Row>\n            <Row>\n              <Col>\n                <FormGroup>\n                  <Label for=\"marca\">Marca</Label>\n                  <Input\n                    id=\"marca\"\n                    name=\"marca_id\"\n                    type=\"select\"\n                    value={this.state.marca_id}\n                    onChange={this.onChangeInput}\n                  >\n                    {this.props.marcas.length !== 0\n                      ? this.props.marcas.map((marca, i) => {\n                          return (\n                            <option value={marca.id} key={i}>\n                              {marca.nome}\n                            </option>\n                          );\n                        })\n                      : null}\n                  </Input>\n                </FormGroup>\n              </Col>\n            </Row>\n            <Row>\n              <Col>\n                <FormGroup>\n                  <Label for=\"tensao\">Tensão da bateria</Label>\n                  <Input\n                    id=\"tensao\"\n                    name=\"tensao_id\"\n                    type=\"select\"\n                    value={this.state.tensao_id}\n                    onChange={this.onChangeInput}\n                  >\n                    {this.props.tensoes.length !== 0\n                      ? this.props.tensoes.map((tensao, i) => {\n                          return (\n                            <option value={tensao.id} key={i}>\n                              {tensao.valor}\n                            </option>\n                          );\n                        })\n                      : null}\n                  </Input>\n                </FormGroup>\n              </Col>\n            </Row>\n\n            <Row>\n              <Col>\n                <FormGroup>\n                  <Label for=\"tipo\">Tipo de sensor</Label>\n                  <Input\n                    id=\"tipo\"\n                    name=\"tipo_id\"\n                    type=\"select\"\n                    value={this.state.tipo_id}\n                    onChange={this.onChangeInput}\n                  >\n                    {this.props.tipos.length !== 0\n                      ? this.props.tipos.map((tipo, i) => {\n                          return (\n                            <option value={tipo.id} key={i}>\n                              {tipo.nome}\n                            </option>\n                          );\n                        })\n                      : null}\n                  </Input>\n                </FormGroup>\n              </Col>\n            </Row>\n          </Form>\n        </ModalBody>\n        <ModalFooter>\n          <Button color=\"success\" onClick={this.submitForm}>\n            Salvar\n          </Button>\n        </ModalFooter>\n      </div>\n    );\n  }\n}\n\nexport default SensorSubmitForm;\n","import React, { Component } from \"react\";\nimport {\n  Button,\n  ModalBody,\n  ModalHeader,\n  ModalFooter,\n  Form,\n  FormGroup,\n  Label,\n  Input\n} from \"reactstrap\";\n\nclass MarcaSubmitForm extends Component {\n  state = {\n    nome: \"\"\n  };\n\n  onInputChange = e => {\n    this.setState({ [e.target.name]: e.target.value });\n  };\n\n  submitForm = e => {\n    this.props.action(this.state).then(res => {\n      window.location.reload();\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <ModalHeader toggle={this.props.toggleModal}>\n          Cadastro de marca\n        </ModalHeader>\n        <ModalBody>\n          <Form>\n            <FormGroup>\n              <Label for=\"nome\">Nome</Label>\n              <Input\n                name=\"nome\"\n                type=\"text\"\n                value={this.state.nome}\n                onChange={this.onInputChange}\n              />\n            </FormGroup>\n          </Form>\n        </ModalBody>\n        <ModalFooter>\n          <Button color=\"success\" onClick={this.submitForm}>\n            Salvar\n          </Button>\n        </ModalFooter>\n      </div>\n    );\n  }\n}\n\nexport default MarcaSubmitForm;\n","import React, { Component } from \"react\";\nimport {\n  Button,\n  ModalBody,\n  ModalHeader,\n  ModalFooter,\n  Form,\n  FormGroup,\n  Label,\n  Input\n} from \"reactstrap\";\n\nclass TipoSubmitForm extends Component {\n  state = {\n    nome: \"\",\n    sulfixo: \"\"\n  };\n\n  onInputChange = e => {\n    this.setState({ [e.target.name]: e.target.value });\n  };\n\n  submitForm = e => {\n    this.props.action(this.state).then(res => {\n      window.location.reload();\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <ModalHeader toggle={this.props.toggleModal}>\n          Cadastro de tipo de sensor\n        </ModalHeader>\n        <ModalBody>\n          <Form>\n            <FormGroup>\n              <Label for=\"nome\">Nome</Label>\n              <Input\n                name=\"nome\"\n                type=\"text\"\n                value={this.state.nome}\n                onChange={this.onInputChange}\n              />\n            </FormGroup>\n\n            <FormGroup>\n              <Label for=\"sulfixo\">Sufixo</Label>\n              <Input\n                name=\"sulfixo\"\n                type=\"text\"\n                value={this.state.sulfixo}\n                onChange={this.onInputChange}\n              />\n            </FormGroup>\n          </Form>\n        </ModalBody>\n        <ModalFooter>\n          <Button color=\"success\" onClick={this.submitForm}>\n            Salvar\n          </Button>\n        </ModalFooter>\n      </div>\n    );\n  }\n}\n\nexport default TipoSubmitForm;\n","import React, { Component } from \"react\";\nimport {\n  Button,\n  ModalBody,\n  ModalHeader,\n  ModalFooter,\n  Form,\n  FormGroup,\n  Label,\n  Input\n} from \"reactstrap\";\n\nclass TensaoSubmitForm extends Component {\n  state = {\n    valor: \"\"\n  };\n\n  onInputChange = e => {\n    this.setState({ [e.target.name]: e.target.value });\n  };\n\n  submitForm = e => {\n    this.props.action(this.state).then(res => {\n      window.location.reload();\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <ModalHeader toggle={this.props.toggleModal}>\n          Cadastro de tensao de bateria\n        </ModalHeader>\n        <ModalBody>\n          <Form>\n            <FormGroup>\n              <Label for=\"valor\">valor</Label>\n              <Input\n                name=\"valor\"\n                type=\"text\"\n                value={this.state.valor}\n                onChange={this.onInputChange}\n              />\n            </FormGroup>\n          </Form>\n        </ModalBody>\n        <ModalFooter>\n          <Button color=\"success\" onClick={this.submitForm}>\n            Salvar\n          </Button>\n        </ModalFooter>\n      </div>\n    );\n  }\n}\n\nexport default TensaoSubmitForm;\n","import axios from \"axios\";\n\n/**\n * Get sensores from server\n */\nexport const listSensores = async () => {\n  return await axios.get(\"/api/sensor/list\");\n};\n\n/**\n * Add a new sensor\n */\nexport const addSensor = async data => {\n  return await axios.post(\"/api/sensor/add\", data);\n};\n\n/**\n * Delete a sensor\n */\nexport const deleteSensor = async id => {\n  return await axios.delete(`/api/sensor/remove/${id}`);\n};\n\n/**\n * Edit a sensor\n */\nexport const editSensor = async (data, id) => {\n  return await axios.put(`/api/sensor/edit/${id}`, data);\n};\n","import axios from \"axios\";\n\n/**\n * Get list of marca\n */\nexport const listMarca = async () => {\n  return await axios.get(\"/api/marca/list\");\n};\n\n/**\n * Register a marca\n */\nexport const addMarca = async data => {\n  return await axios.post(\"/api/marca/add\", data);\n};\n","import axios from \"axios\";\n\nexport const listTensao = async () => {\n  return await axios.get(\"/api/tensao/list\");\n};\n\nexport const addTensao = async data => {\n  return await axios.post(\"/api/tensao/add\", data);\n};\n","import axios from \"axios\";\n\nexport const listTipo = async () => {\n  return await axios.get(\"/api/tipo/list\");\n};\n\nexport const addTipo = async data => {\n  return await axios.post(\"/api/tipo/add\", data);\n};\n","import React, { Component } from \"react\";\nimport { Collapse, ListGroup, ListGroupItem, Button, Modal } from \"reactstrap\";\nimport SensorTable from \"../components/SensorTable\";\nimport GeneralTable from \"../components/GeneralTable\";\nimport SensorSubmitForm from \"../components/SensorSubmitForm\";\nimport MarcaSubmitForm from \"../components/MarcaSubmitForm\";\nimport TipoSubmitForm from \"../components/TipoSubmitForm\";\nimport TensaoSubmitForm from \"../components/TensaoSubmitForm\";\nimport { deleteSensor, addSensor, editSensor } from \"../actions/sensor\";\nimport { addMarca } from \"../actions/marca\";\nimport { addTensao } from \"../actions/tensao\";\nimport { addTipo } from \"../actions/tipo\";\n\nclass Administracao extends Component {\n  state = {\n    open: \"\",\n    modalOpen: false,\n    sensorModalMode: \"\",\n    toBeEdited: null\n  };\n\n  toggleCollapse = e => {\n    if (e.target.id === this.state.open) {\n      this.setState({ open: \"\" });\n    } else {\n      this.setState({ open: e.target.id });\n    }\n  };\n\n  toggleModal = e => {\n    if (e.target.name === \"add\") this.setState({ toBeEdited: null });\n\n    this.setState({\n      modalOpen: !this.state.modalOpen,\n      sensorModalMode: e.target.name\n    });\n  };\n\n  modalContent = () => {\n    let response;\n    // eslint-disable-next-line default-case\n    switch (this.state.open) {\n      case \"sensores\":\n        response = (\n          <SensorSubmitForm\n            sensor={this.state.toBeEdited}\n            marcas={this.props.marcas}\n            tipos={this.props.tipos}\n            tensoes={this.props.tensoes}\n            action={\n              this.state.sensorModalMode === \"add\" ? addSensor : editSensor\n            }\n            toggleModal={this.toggleModal}\n          />\n        );\n        break;\n      case \"marcas\":\n        response = (\n          <MarcaSubmitForm toggleModal={this.toggleModal} action={addMarca} />\n        );\n        break;\n\n      case \"tipos\":\n        response = (\n          <TipoSubmitForm toggleModal={this.toggleModal} action={addTipo} />\n        );\n        break;\n\n      case \"tensoes\":\n        response = (\n          <TensaoSubmitForm toggleModal={this.toggleModal} action={addTensao} />\n        );\n        break;\n    }\n\n    return response;\n  };\n\n  onDeleteSensor = e => {\n    deleteSensor(e.target.name).then(data => {\n      window.location.reload();\n    });\n  };\n\n  onEditSensor = data => e => {\n    this.setState({ toBeEdited: data });\n    this.toggleModal(e);\n  };\n\n  render() {\n    return (\n      <div>\n        <Modal isOpen={this.state.modalOpen}>{this.modalContent()}</Modal>\n\n        <ListGroup>\n          <ListGroupItem\n            id=\"sensores\"\n            tag=\"button\"\n            action\n            onClick={this.toggleCollapse}\n          >\n            Sensores\n          </ListGroupItem>\n          <Collapse isOpen={this.state.open === \"sensores\"}>\n            <Button name=\"add\" color=\"success\" onClick={this.toggleModal}>\n              Novo\n            </Button>\n\n            <SensorTable\n              onDeleteSensor={this.onDeleteSensor}\n              onEditSensor={this.onEditSensor}\n              sensores={this.props.sensores}\n              marcas={this.props.marcas}\n              tipos={this.props.tipos}\n              tensoes={this.props.tensoes}\n            ></SensorTable>\n          </Collapse>\n\n          <ListGroupItem\n            id=\"marcas\"\n            tag=\"button\"\n            action\n            onClick={this.toggleCollapse}\n          >\n            Marcas e Fornecedores\n          </ListGroupItem>\n          <Collapse isOpen={this.state.open === \"marcas\"}>\n            <Button name=\"add\" color=\"success\" onClick={this.toggleModal}>\n              Novo\n            </Button>\n            <GeneralTable tableType={this.props.marcas}></GeneralTable>\n          </Collapse>\n\n          <ListGroupItem\n            id=\"tipos\"\n            tag=\"button\"\n            action\n            onClick={this.toggleCollapse}\n          >\n            Tipos de sensor\n          </ListGroupItem>\n          <Collapse isOpen={this.state.open === \"tipos\"}>\n            <Button name=\"add\" color=\"success\" onClick={this.toggleModal}>\n              Novo\n            </Button>\n            <GeneralTable tableType={this.props.tipos}></GeneralTable>\n          </Collapse>\n\n          <ListGroupItem\n            id=\"tensoes\"\n            tag=\"button\"\n            action\n            onClick={this.toggleCollapse}\n          >\n            Tensóes de bateria\n          </ListGroupItem>\n          <Collapse isOpen={this.state.open === \"tensoes\"}>\n            <Button name=\"add\" color=\"success\" onClick={this.toggleModal}>\n              Novo\n            </Button>\n            <GeneralTable tableType={this.props.tensoes}></GeneralTable>\n          </Collapse>\n        </ListGroup>\n      </div>\n    );\n  }\n}\n\nexport default Administracao;\n","import React, { Component } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport { Spinner } from \"reactstrap\";\n\nclass Chart extends Component {\n  render() {\n    if (this.props.sensor === null) {\n      return <Spinner />;\n    }\n\n    let data = {\n      labels: this.props.sensor.Medidas.map((medida, i) => i + 1),\n      datasets: [\n        {\n          label: this.props.sulfixo,\n          fill: false,\n          lineTension: 0.1,\n          backgroundColor: \"rgba(75,192,192,0.4)\",\n          borderColor: \"rgba(75,192,192,1)\",\n          borderCapStyle: \"butt\",\n          borderDash: [],\n          borderDashOffset: 0.0,\n          borderJoinStyle: \"miter\",\n          pointBorderColor: \"rgba(75,192,192,1)\",\n          pointBackgroundColor: \"#fff\",\n          pointBorderWidth: 1,\n          pointHoverRadius: 5,\n          pointHoverBackgroundColor: \"rgba(75,192,192,1)\",\n          pointHoverBorderColor: \"rgba(220,220,220,1)\",\n          pointHoverBorderWidth: 2,\n          pointRadius: 1,\n          pointHitRadius: 10,\n          data: this.props.sensor.Medidas.map(medida => medida.valor)\n        }\n      ]\n    };\n\n    return (\n      <div>\n        <h2>Dados de {this.props.sensor.codename}</h2>\n        <Line data={data} />\n      </div>\n    );\n  }\n}\n\nexport default Chart;\n","import React from \"react\";\nimport { Badge } from \"reactstrap\";\n\nimport GoogleMap from \"google-map-react\";\n\nconst mapCenter = (lat, lng) => {\n  let response = {\n    lat: 0,\n    lng: 0\n  };\n\n  for (let x in lat) {\n    response.lat += x;\n  }\n\n  response.lat = response.lat / lat.length;\n\n  for (let x in lng) {\n    response.lng += x;\n  }\n\n  response.lng = response.lng / lng.length;\n\n  return response;\n};\n\nconst Map = props => {\n  let latList = props.sensores.map(sensor => {\n    return sensor.Localizacao.latitude;\n  });\n\n  let lngList = props.sensores.map(sensor => {\n    return sensor.Localizacao.longitude;\n  });\n\n  return (\n    <GoogleMap center={mapCenter(latList, lngList)} zoom={props.zoom}>\n      {/*<Badge lat={props.lat} lng={props.lng} href=\"#\" color=\"primary\" pill>\n        Teste\n      </Badge>*/}\n\n      {props.sensores.map((sensor, i) => {\n        return (\n          <Badge\n            lat={sensor.Localizacao.latitude}\n            lng={sensor.Localizacao.longitude}\n            href=\"#\"\n            color=\"danger\"\n            pill\n            key={i}\n            id={i}\n            onClick={props.onSensorClick}\n          >\n            {sensor.codename}\n          </Badge>\n        );\n      })}\n    </GoogleMap>\n  );\n};\n\nexport default Map;\n","import axios from \"axios\";\n\nexport const listMedidas = async sensor_id => {\n  return await axios.get(`/api/medida/list/${sensor_id}`);\n};\n\nexport const addMedida = async newMedida => {\n  return await axios.post(\"/api/medida/add\", newMedida);\n};\n","import React, { Component } from \"react\";\nimport {\n  Spinner,\n  Row,\n  Col,\n  ListGroup,\n  ListGroupItem,\n  Collapse,\n  InputGroup,\n  InputGroupAddon,\n  Input,\n  Button\n} from \"reactstrap\";\nimport Chart from \"../components/Chart\";\nimport Map from \"../components/Map\";\n\nimport { addMedida } from \"../actions/medida\";\n\nclass Sensores extends Component {\n  state = {\n    selectedSensor: null,\n    newMedida: \"\",\n    isOpen: false\n  };\n\n  onSensorClick = e => {\n    e.preventDefault();\n\n    this.setState({\n      selectedSensor: this.props.sensores[parseInt(e.target.id)],\n      isOpen: true\n    });\n  };\n\n  onInputChange = e => {\n    this.setState({ [e.target.name]: e.target.value });\n  };\n\n  submitNewMedida = e => {\n    addMedida({\n      valor: this.state.newMedida,\n      sensor_id: this.state.selectedSensor.id\n    }).then(res => {\n      window.location.reload();\n    });\n  };\n\n  render() {\n    if (this.props.sensores.length === 0) {\n      return <Spinner></Spinner>;\n    }\n\n    return (\n      <Row style={{ paddingBottom: \"10px\" }}>\n        <Col xs=\"12\" sm=\"9\">\n          <div style={{ height: \"90vh\", width: \"100%\" }}>\n            <Map\n              zoom={2}\n              sensores={this.props.sensores}\n              onSensorClick={this.onSensorClick}\n            ></Map>\n          </div>\n        </Col>\n        <Col xs=\"12\" sm=\"3\">\n          <ListGroup>\n            {this.props.sensores.map((sensor, i) => {\n              return (\n                <ListGroupItem\n                  id={i}\n                  key={i}\n                  tag=\"button\"\n                  action\n                  onClick={this.onSensorClick}\n                >\n                  {sensor.codename}\n                </ListGroupItem>\n              );\n            })}\n          </ListGroup>\n        </Col>\n        <Col xs=\"12\">\n          <Collapse isOpen={this.state.isOpen}>\n            <Chart\n              sensor={this.state.selectedSensor}\n              sulfixo={\n                this.state.selectedSensor !== null\n                  ? this.props.tipos.find(\n                      tipo => tipo.id === this.state.selectedSensor.tipo_id\n                    ).sulfixo\n                  : null\n              }\n            />\n            <InputGroup>\n              <Input\n                type=\"number\"\n                placeholder=\"Valor\"\n                name=\"newMedida\"\n                value={this.state.newMedidaField}\n                onChange={this.onInputChange}\n              />\n\n              <InputGroupAddon addonType=\"append\">\n                <Button onClick={this.submitNewMedida}>Nova Medição</Button>\n              </InputGroupAddon>\n            </InputGroup>\n          </Collapse>\n        </Col>\n      </Row>\n    );\n  }\n}\n\nexport default Sensores;\n","import React, { Component } from \"react\";\nimport { Router, Route, Redirect } from \"react-router-dom\";\nimport { createBrowserHistory } from \"history\";\nimport { Container } from \"reactstrap\";\n\nimport TabBar from \"./components/TabBar\";\nimport Administracao from \"./views/Administracao\";\nimport Sensores from \"./views/Sensores\";\n\nimport { listSensores } from \"./actions/sensor\";\nimport { listMarca } from \"./actions/marca\";\nimport { listTipo } from \"./actions/tipo\";\nimport { listTensao } from \"./actions/tensao\";\n\nconst hist = createBrowserHistory();\n\nclass App extends Component {\n  state = {\n    sensores: [],\n    marcas: [],\n    tipos: [],\n    tensoes: []\n  };\n\n  async componentDidMount() {\n    let marcaRequest = await listMarca();\n    let tipoRequest = await listTipo();\n    let tensaoRequest = await listTensao();\n\n    this.setState({ marcas: marcaRequest.data });\n    this.setState({ tipos: tipoRequest.data });\n    this.setState({ tensoes: tensaoRequest.data });\n\n    listSensores()\n      .then(res => {\n        this.setState({ sensores: res.data.sensor });\n      })\n      .catch(err => {\n        alert(\"Por favor, cadastre um novo sensor!\");\n      });\n  }\n\n  render() {\n    return (\n      <Router history={hist}>\n        <TabBar history={hist}></TabBar>\n        <Container fluid={true}>\n          <Route\n            path=\"/admin\"\n            render={props => (\n              <Administracao\n                {...props}\n                sensores={this.state.sensores}\n                marcas={this.state.marcas}\n                tipos={this.state.tipos}\n                tensoes={this.state.tensoes}\n              />\n            )}\n          />\n          <Route\n            path=\"/sensores\"\n            render={props => (\n              <Sensores\n                {...props}\n                sensores={this.state.sensores}\n                tipos={this.state.tipos}\n              />\n            )}\n          />\n        </Container>\n        <Redirect from=\"/\" to=\"/admin\" />\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}